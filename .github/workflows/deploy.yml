name: Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]
  # Allow manual triggering
  workflow_dispatch:

# Top-level permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Full history for better versioning
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        # Remove cache to avoid dependency issues
        registry-url: 'https://registry.npmjs.org/'

    - name: Install dependencies
      run: |
        # Fix for Rollup dependency issue in CI environment
        rm -rf node_modules package-lock.json
        npm install
        echo "‚úÖ Dependencies installed successfully"

    - name: Type check
      run: npm run typecheck || exit 1
    
    - name: Clean any previous builds
      run: |
        rm -rf dist
        rm -rf node_modules/.cache/gh-pages

    - name: Build
      env:
        VITE_SUPABASE_URL: https://uumavtvxuncetfqwlgvp.supabase.co
        VITE_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV1bWF2dHZ4dW5jZXRmcXdsZ3ZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE3MjM2NTQsImV4cCI6MjA2NzI5OTY1NH0.AAoykuZmtZ3gLtbAXLjlYkyqaVUsghx84CP9nF1xkHU
        NODE_ENV: production
        # Set to 'false' for GitHub Pages deployment, 'true' for custom domain
        VITE_CUSTOM_DOMAIN: 'false'
      run: |
        # Build with the correct base URL (Vite config already handles this)
        echo "üèóÔ∏è Starting build process..."
        echo "Building for GitHub Pages (VITE_CUSTOM_DOMAIN=$VITE_CUSTOM_DOMAIN)"
        npm run build || { echo "‚ùå Build failed"; exit 1; }
        echo "‚úÖ Build completed successfully"
        
        # Create .nojekyll to bypass Jekyll processing
        touch dist/.nojekyll
        
        # Copy .htaccess for proper MIME types (Apache servers)
        cp -f public/.htaccess dist/ 2>/dev/null || echo "No .htaccess found"
        
        # Copy _headers for Netlify-style hosting
        cp -f public/_headers dist/ 2>/dev/null || echo "No _headers found"
        
        # Copy web.config for IIS servers
        cp -f public/web.config dist/ 2>/dev/null || echo "No web.config found"
        
        # Copy 404.html for SPA routing
        cp dist/index.html dist/404.html
        
        # Copy public assets to dist (ensure critical files are copied)
        cp -f public/favicon.ico dist/ 2>/dev/null || echo "No favicon.ico found"
        cp -f public/favicon.svg dist/ 2>/dev/null || echo "No favicon.svg found"
        cp -f public/robots.txt dist/ 2>/dev/null || echo "No robots.txt found"
        cp -f public/sitemap.xml dist/ 2>/dev/null || echo "No sitemap.xml found"
        cp -f public/_redirects dist/ 2>/dev/null || echo "No _redirects found"
        
        # Copy images directory if it exists
        if [ -d "public/images" ]; then
          cp -r public/images dist/ 2>/dev/null || echo "Failed to copy images directory"
          echo "‚úÖ Images directory copied"
        else
          echo "‚ö†Ô∏è No images directory found in public/"
        fi
        
        # Verify build artifacts
        echo "Checking build output..."
        ls -la dist/
        echo "Checking asset directories..."
        ls -la dist/assets/ || echo "No assets directory found"
        
        # Build size analysis
        echo "üìä Build size analysis:"
        du -sh dist/
        echo "Asset sizes:"
        find dist/assets -name "*.js" -exec ls -lh {} \; 2>/dev/null | awk '{print $5 " " $9}' || echo "No JS assets found"
        find dist/assets -name "*.css" -exec ls -lh {} \; 2>/dev/null | awk '{print $5 " " $9}' || echo "No CSS assets found"

    - name: Verify build output
      run: |
        echo "Verifying build output structure..."
        ls -la dist/
        
        echo "Checking build output integrity..."
        # Check for required files
        for file in index.html 404.html .nojekyll; do
          if [ -f "dist/$file" ]; then
            echo "‚úÖ Found $file"
          else
            echo "‚ùå Missing $file"
            exit 1
          fi
        done
        
        # Check for assets directory
        if [ -d "dist/assets" ]; then
          echo "‚úÖ Assets directory exists"
        else
          echo "‚ùå Missing assets directory"
          exit 1
        fi
        
        # Verify base path in HTML files
        echo "Checking base paths in HTML files..."
        for file in dist/*.html; do
          if grep -q '/ShatamCareFoundation/' "$file"; then
            echo "‚úÖ Base path correctly set in $(basename "$file")"
          else
            echo "‚ö†Ô∏è Base path might be missing in $(basename "$file")"
          fi
        done
        
        # Make sure no source files are included
        if [ -d "dist/src" ]; then
          echo "‚ùå Source files found in dist/src! Removing..."
          rm -rf dist/src
        else
          echo "‚úÖ No source files in dist/"
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
      contents: read
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Verify deployment
        run: |
          echo "‚è≥ Waiting for GitHub Pages deployment to propagate (45 seconds)..."
          sleep 45
          
          echo "üîç Verifying deployment..."
          SITE_URL="${{ steps.deployment.outputs.page_url }}"
          
          # Function to check URL with retry
          check_url() {
            local url=$1
            local max_retries=3
            local retry=0
            local status
            
            while [ $retry -lt $max_retries ]; do
              status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              if [ "$status" -eq 200 ]; then
                return 0
              fi
              echo "Attempt $((retry + 1)) failed (status: $status). Retrying..."
              retry=$((retry + 1))
              sleep 10
            done
            return 1
          }
          
          # Check main page
          if check_url "$SITE_URL"; then
            echo "‚úÖ Main site is accessible!"
            
            # Check for source file references
            RESPONSE=$(curl -s "$SITE_URL")
            if ! echo "$RESPONSE" | grep -q "src/"; then
              echo "‚úÖ No unwanted source references found"
            else
              echo "‚ö†Ô∏è WARNING: Found source file references"
            fi
            
            # Verify assets are loading
            if echo "$RESPONSE" | grep -q "/ShatamCareFoundation/assets/"; then
              echo "‚úÖ Asset paths are correctly prefixed"
            else
              echo "‚ö†Ô∏è WARNING: Asset paths might be incorrect"
            fi
            
            # Check SPA routing
            if check_url "${SITE_URL}our-programs"; then
              echo "‚úÖ SPA routing is working"
            else
              echo "‚ö†Ô∏è SPA routing check failed - verify manually"
            fi
          else
            echo "‚ùå Site verification failed after multiple attempts"
            echo "Please check the deployment manually at: $SITE_URL"
          fi
